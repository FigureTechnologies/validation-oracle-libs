[versions]
bouncyCastle = "1.70"
feign = "11.8"
grpc = "1.47.0"
jackson = "2.14.1"
jacksonProtobuf = "0.9.13"
kotest = "5.5.4"
kotest_extension = "1.1.2"
kotlin = "1.6.21"
kotlinCoroutines = "1.6.2"
kotlinLogging = "3.0.4"
ktlint = "0.48.1"
logback = "1.2.6"
mockk = "1.12.4"
okHttp = "4.9.3"
protobuf = "3.21.1"
provenanceClient = "1.1.1"
provenanceEventStream = "0.6.3"
provenanceGateway = "2.0.2"
provenanceHdWallet = "0.1.15"
provenanceProto = "1.10.0"
provenanceScope = "0.6.0"
scarlet = "0.1.12"
testContainers = "1.17.6"

[libraries]
bouncyCastleBcProv = { module = "org.bouncycastle:bcprov-jdk15on", version.ref = "bouncyCastle" }
coroutinesCore = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinCoroutines" }
coroutinesCoreJvm = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm", version.ref = "kotlinCoroutines" }
coroutinesJdk8 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8", version.ref = "kotlinCoroutines" }
coroutinesReactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinCoroutines" }
coroutinesTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinCoroutines" }
feignJackson = { module = "io.github.openfeign:feign-jackson", version.ref = "feign" }
grpcNettyShaded = { module = "io.grpc:grpc-netty-shaded", version.ref = "grpc" }
grpcProtobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpcStub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
jackson_DataTypeJdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8", version.ref = "jackson" }
jackson_DataTypeJsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson_KotlinModule = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson_ParanamerModule = { module = "com.fasterxml.jackson.module:jackson-module-paranamer", version.ref = "jackson" }
jackson_ProtobufModule = { module = "com.hubspot.jackson:jackson-datatype-protobuf", version.ref = "jacksonProtobuf" }
kotest_assertionsCoreJvm = { module = "io.kotest:kotest-assertions-core-jvm", version.ref = "kotest" }
kotest_frameworkDatatest = { module = "io.kotest:kotest-framework-datatest", version.ref = "kotest" }
kotest_junit5RunnerJvm = { module = "io.kotest:kotest-runner-junit5-jvm", version.ref = "kotest" }
kotest_propertyJvm = { module = "io.kotest:kotest-property-jvm", version.ref = "kotest" }
kotest_springExtensions = { module = "io.kotest.extensions:kotest-extensions-spring", version.ref = "kotest_extension" }
kotlinAllOpen = { module = "org.jetbrains.kotlin:kotlin-allopen", version.ref = "kotlin" }
kotlinLogging = { module = "io.github.microutils:kotlin-logging-jvm", version.ref = "kotlinLogging" }
kotlinReflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlinStdLibJdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlinTest = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
ktlint = { module = "com.pinterest:ktlint", version.ref = "ktlint" }
logbackClassic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
okHttp3 = { module = "com.squareup.okhttp3:okhttp", version.ref = "okHttp" }
protobufJava = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protobufJavaUtil = { module = "com.google.protobuf:protobuf-java-util", version.ref = "protobuf" }
provenanceEventStreamApi = { module = "io.provenance.eventstream:es-api", version.ref = "provenanceEventStream" }
provenanceEventStreamApiModel = { module = "io.provenance.eventstream:es-api-model", version.ref = "provenanceEventStream" }
provenanceEventStreamCli = { module = "io.provenance.eventstream:es-cli", version.ref = "provenanceEventStream" }
provenanceEventStreamCore = { module = "io.provenance.eventstream:es-core", version.ref = "provenanceEventStream" }
provenanceGatewayClient = { module = "io.provenance.objectstore.gateway:client", version.ref = "provenanceGateway" }
provenanceGrpcClient = { module = "io.provenance.client:pb-grpc-client-kotlin", version.ref = "provenanceClient" }
provenanceHdWallet = { module = "io.provenance.hdwallet:hdwallet", version.ref = "provenanceHdWallet" }
provenanceProto = { module = "io.provenance:proto-kotlin", version.ref = "provenanceProto" }
provenanceScopeEncryption = { module = "io.provenance.scope:encryption", version.ref = "provenanceScope" }
provenanceScopeOsClient = { module = "io.provenance.scope:os-client", version.ref = "provenanceScope" }
provenanceScopeUtil = { module = "io.provenance.scope:util", version.ref = "provenanceScope" }
scarlet = { module = "com.tinder.scarlet:scarlet", version.ref = "scarlet" }
scarletMessageAdapterMoshi = { module = "com.tinder.scarlet:message-adapter-moshi", version.ref = "scarlet" }
scarletStreamAdapterCoroutines = { module = "com.tinder.scarlet:stream-adapter-coroutines", version.ref = "scarlet" }
scarletWebSocketOkHttp = { module = "com.tinder.scarlet:websocket-okhttp", version.ref = "scarlet" }
testContainers = { module = "org.testcontainers:testcontainers", version.ref = "testContainers" }
testContainersJUnit = { module = "org.testcontainers:junit-jupiter", version.ref = "testContainers" }

# This doesn't current work in a way that's useful.  Keeping this here for a magical future where it's relevant
[plugins]
idea = { id = "idea" }

[bundles]
coroutines = ["coroutinesCore", "coroutinesCoreJvm", "coroutinesReactor", "coroutinesJdk8"]
eventStream = ["provenanceEventStreamApi", "provenanceEventStreamApiModel", "provenanceEventStreamCore"]
grpc = ["grpcNettyShaded", "grpcProtobuf", "grpcStub"]
jackson = [
    "jackson_DataTypeJdk8",
    "jackson_DataTypeJsr310",
    "jackson_KotlinModule",
    "jackson_ParanamerModule",
    "jackson_ProtobufModule"
]
kotlin = ["kotlinAllOpen", "kotlinReflect", "kotlinStdLibJdk8"]
protobuf = ["protobufJava", "protobufJavaUtil"]
provenance = ["provenanceGrpcClient", "provenanceHdWallet", "provenanceProto", "provenanceScopeEncryption", "provenanceScopeUtil"]
scarlet = ["scarletMessageAdapterMoshi", "scarlet", "scarletStreamAdapterCoroutines", "scarletWebSocketOkHttp"]
kotest = [
    "kotest_junit5RunnerJvm",
    "kotest_assertionsCoreJvm",
    "kotest_propertyJvm",
    "kotest_frameworkDatatest",
    "kotest_springExtensions",
]
testContainers = ["testContainers", "testContainersJUnit"]
